{
  "response":{"numFound":2175,"start":0,"docs":[
      {
        "id":"28d00o-default_node_index-2512",
        "index_id":"default_node_index",
        "item_id":"2512",
        "hash":"28d00o",
        "site":"http://cypress_local/",
        "is_author":1,
        "ds_changed":"2015-02-01T17:20:53Z",
        "is_comment_count":0,
        "ds_created":"2015-02-01T17:13:00Z",
        "is_field_product_category":189,
        "bs_promote":false,
        "ss_search_api_language":"und",
        "bs_sticky":false,
        "ss_type":"part",
        "timestamp":"2015-02-01T21:34:14.642Z",
        "tm_title":[
          "123"],
        "sm_field_attributes$field_attribute_name":["mwmory","cpu"],
        "spell":[
          "123"],
        "sm_field_attributes$field_attribute_value":["1024","1 5ghz"]},
      {
        "id":"28d00o-knowledge_base-116",
        "index_id":"knowledge_base",
        "item_id":"116",
        "hash":"28d00o",
        "site":"http://cypress_local/",
        "ds_changed":"2014-12-02T21:07:35Z",
        "bs_is_new":false,
        "is_nid":116,
        "ss_search_api_language":"und",
        "ss_title":"Low and Battery power techniques with CapSense",
        "is_vid":121,
        "timestamp":"2015-02-03T00:50:14.557Z",
        "im_field_related_products$parents_all":[11,16],
        "tm_search_api_aggregation_1":[
          "Low and Battery power techniques with CapSense\n\nWhat are the battery power techniques, and low power techniques that are used with CapSense?\n\n11 CapSense® Controllers\n\n16 Dual-Port SRAMs\n\n&lt;p&gt;The PSoC has a sleep mode that works well with CapSense. See Application Note AN2360 for more information, \"Capacitive Sensing - Power and Sleep Considerations\". The PSoC can be made to sleep in between scans to conserve power.&lt;/p&gt;\n"],
        "tm_field_question":[
          "What are the battery power techniques, and low power techniques that are used with CapSense?"],
        "im_field_related_products":[11,16],
        "tm_field_answer$value":[
          "&lt;p&gt;The PSoC has a sleep mode that works well with CapSense. See Application Note AN2360 for more information, \"Capacitive Sensing - Power and Sleep Considerations\". The PSoC can be made to sleep in between scans to conserve power.&lt;/p&gt;\n"],
        "spell":[
          "&lt;p&gt;The PSoC has a sleep mode that works well with CapSense. See Application Note AN2360 for more information, \"Capacitive Sensing - Power and Sleep Considerations\". The PSoC can be made to sleep in between scans to conserve power.&lt;/p&gt;\n",
          "What are the battery power techniques, and low power techniques that are used with CapSense?",
          "Low and Battery power techniques with CapSense\n\nWhat are the battery power techniques, and low power techniques that are used with CapSense?\n\n11 CapSense® Controllers\n\n16 Dual-Port SRAMs\n\n&lt;p&gt;The PSoC has a sleep mode that works well with CapSense. See Application Note AN2360 for more information, \"Capacitive Sensing - Power and Sleep Considerations\". The PSoC can be made to sleep in between scans to conserve power.&lt;/p&gt;\n"]},
      {
        "id":"28d00o-knowledge_base-1731",
        "index_id":"knowledge_base",
        "item_id":"1731",
        "hash":"28d00o",
        "site":"http://cypress_local/",
        "ds_changed":"2014-12-17T02:28:53Z",
        "bs_is_new":false,
        "is_nid":1731,
        "ss_search_api_language":"und",
        "ss_title":"Programming third party's devices using MiniProg3 with JTAG chain",
        "is_vid":1736,
        "timestamp":"2015-02-03T00:50:16.646Z",
        "im_field_related_products$parents_all":[158,151,159,151],
        "tm_search_api_aggregation_1":[
          "Programming third party's devices using MiniProg3 with JTAG chain\n\nI have multiple devices other than PSoC 3/5 on a board, Can I use MiniProg3 to program all of them with a JTAG chain? \n\n158 PSoC® 3\n\n159 PSoC® 5\n\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;Yes, you should be able to assemble chain with non PSoC 3/5 devices:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;1) You have to made all HW connection properly.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;2) Then press \"Scan Bus\" button in PSoC&nbsp;Programmer&nbsp;GUI and see what devices are detected on the chain.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;3) After that it is required to provide correct size of IR register for each device on the chain (for PSoC 3/5 it is 4-bit, maybe different for other devices).&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;4) You need to be sure that JTAG ports/pins are always accessible (opened) on third party JTAG devices, so that&nbsp;chain will not be broken.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;a href=\"http://www.cypress.com/?rID=44327\" style=\"color: rgb(55, 128, 203); -webkit-tap-highlight-color: rgb(230, 230, 230);\"&gt;AN62391&lt;/a&gt;&nbsp;has the detailed programming&nbsp;interfacing, timing, and code implementation reference for PSoC3 devices.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;AN64359 has the detailed programming&nbsp;interfacing, timing, and code implementation reference for PSoC5 devices.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n"],
        "tm_field_question":[
          "I have multiple devices other than PSoC 3/5 on a board, Can I use MiniProg3 to program all of them with a JTAG chain? "],
        "im_field_related_products":[158,159],
        "tm_field_answer$value":[
          "&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;Yes, you should be able to assemble chain with non PSoC 3/5 devices:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;1) You have to made all HW connection properly.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;2) Then press \"Scan Bus\" button in PSoC&nbsp;Programmer&nbsp;GUI and see what devices are detected on the chain.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;3) After that it is required to provide correct size of IR register for each device on the chain (for PSoC 3/5 it is 4-bit, maybe different for other devices).&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;4) You need to be sure that JTAG ports/pins are always accessible (opened) on third party JTAG devices, so that&nbsp;chain will not be broken.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;a href=\"http://www.cypress.com/?rID=44327\" style=\"color: rgb(55, 128, 203); -webkit-tap-highlight-color: rgb(230, 230, 230);\"&gt;AN62391&lt;/a&gt;&nbsp;has the detailed programming&nbsp;interfacing, timing, and code implementation reference for PSoC3 devices.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;AN64359 has the detailed programming&nbsp;interfacing, timing, and code implementation reference for PSoC5 devices.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n"],
        "spell":[
          "&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;Yes, you should be able to assemble chain with non PSoC 3/5 devices:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;1) You have to made all HW connection properly.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;2) Then press \"Scan Bus\" button in PSoC&nbsp;Programmer&nbsp;GUI and see what devices are detected on the chain.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;3) After that it is required to provide correct size of IR register for each device on the chain (for PSoC 3/5 it is 4-bit, maybe different for other devices).&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;4) You need to be sure that JTAG ports/pins are always accessible (opened) on third party JTAG devices, so that&nbsp;chain will not be broken.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;a href=\"http://www.cypress.com/?rID=44327\" style=\"color: rgb(55, 128, 203); -webkit-tap-highlight-color: rgb(230, 230, 230);\"&gt;AN62391&lt;/a&gt;&nbsp;has the detailed programming&nbsp;interfacing, timing, and code implementation reference for PSoC3 devices.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;AN64359 has the detailed programming&nbsp;interfacing, timing, and code implementation reference for PSoC5 devices.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n",
          "I have multiple devices other than PSoC 3/5 on a board, Can I use MiniProg3 to program all of them with a JTAG chain? ",
          "Programming third party's devices using MiniProg3 with JTAG chain\n\nI have multiple devices other than PSoC 3/5 on a board, Can I use MiniProg3 to program all of them with a JTAG chain? \n\n158 PSoC® 3\n\n159 PSoC® 5\n\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;Yes, you should be able to assemble chain with non PSoC 3/5 devices:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;1) You have to made all HW connection properly.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;2) Then press \"Scan Bus\" button in PSoC&nbsp;Programmer&nbsp;GUI and see what devices are detected on the chain.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;3) After that it is required to provide correct size of IR register for each device on the chain (for PSoC 3/5 it is 4-bit, maybe different for other devices).&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;4) You need to be sure that JTAG ports/pins are always accessible (opened) on third party JTAG devices, so that&nbsp;chain will not be broken.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;a href=\"http://www.cypress.com/?rID=44327\" style=\"color: rgb(55, 128, 203); -webkit-tap-highlight-color: rgb(230, 230, 230);\"&gt;AN62391&lt;/a&gt;&nbsp;has the detailed programming&nbsp;interfacing, timing, and code implementation reference for PSoC3 devices.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;&lt;span style=\"font-family: verdana, geneva, sans-serif; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;&lt;span style=\"font-family: inherit; font-size: 12px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit;\"&gt;AN64359 has the detailed programming&nbsp;interfacing, timing, and code implementation reference for PSoC5 devices.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\n"]},
      {
        "id":"28d00o-knowledge_base-1736",
        "index_id":"knowledge_base",
        "item_id":"1736",
        "hash":"28d00o",
        "site":"http://cypress_local/",
        "ds_changed":"2014-12-19T18:32:05Z",
        "is_field_knowledge_base_type":511,
        "bs_is_new":false,
        "is_nid":1736,
        "ss_search_api_language":"und",
        "ss_title":" Differences Between Address Roll-Over Schemes in F-RAM and nvSRAM Devices Under Write-Protect Settings - KBA88168",
        "is_vid":1741,
        "timestamp":"2015-02-03T00:50:16.646Z",
        "im_field_related_products$parents_all":[149,147],
        "tm_search_api_aggregation_1":[
          " Differences Between Address Roll-Over Schemes in F-RAM and nvSRAM Devices Under Write-Protect Settings - KBA88168\n\n511 ByteCraft\n\nWill a roll-over happen when data is written to the last address of an F-RAM? How is it different from an nvSRAM? What happens when the F-RAM has a write-protected block? \n\n149 Nonvolatile Products\n\n**\n\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;When a bulk write is initiated on an F-RAM device, its internal address counter automatically increments to the next memory location after every successful byte write. When the internal address counter reaches the last memory address on the F-RAM device, further auto-increment causes the address counter to roll over to its start address. Thus, further writes overwrite any previously written data.&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; padding-top: 10px; padding-bottom: 10px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;Consider a 64-Kbit device, which has 8192 locations and requires a 13-bit address to access its 64-Kbit locations. When you start a write operation, and continue writing even after the last memory location (address 0x1FFF), the internal address counter rolls over to the device’s start address (0x0000) and continues to increment from that location. For example, if you start to write from the address 0x1FFC and write eight bytes sequentially, you would write at addresses 0x1FFC, 0x1FFD, 0x1FFE, 0x1FFF, 0x0000, 0x0001, 0x0002, and 0x0003.&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;However, there exists a difference between nvSRAM and F-RAM devices when a memory block is write-protected (with the block- protect bits BP0 and BP1 setting in the status register).&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; padding-top: 10px; padding-bottom: 10px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;In an nvSRAM, the address counter continues to increment when the write pointer enters the protected block; however no actual writes happen. Writes resume when the address counter reaches the unprotected block region. Consider an nvSRAM with the upper one-fourth block (addresses 0x1800 to 0x1FFF) write-protected. If a bulk write is initiated at the address 0x1700 and continued into the protected block, data will get written in addresses 0x1700 to 0x17FF, but data written into 0x1800 to 0x1FFF will be lost and further data will be actually written from the address 0x0000 onwards. In other words, the controller should take into account the protected blocks and perform bulk writes only on to unprotected blocks.&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;On the other hand, in an F-RAM device, when the write pointer increments from the last memory location of an unprotected block, the address increment stops, and consequently, data write stops in the protected memory block. Consider an F-RAM with the upper one-fourth block (addresses 0x1800 to 0x1FFF) write-protected. If a bulk write is initiated at the address 0x1700 and continued into the protected block, data will get written in addresses 0x1700 to 0x17FF. The next data byte will not get written in the address 0x1800. In addition, the address increment stops at the address 0x1800. All the subsequent writes will be lost.&lt;/p&gt;\n"],
        "tm_field_question":[
          "Will a roll-over happen when data is written to the last address of an F-RAM? How is it different from an nvSRAM? What happens when the F-RAM has a write-protected block? "],
        "im_field_knowledge_base_type$parents_all":[511,506],
        "im_field_related_products":[149],
        "tm_field_answer$value":[
          "&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;When a bulk write is initiated on an F-RAM device, its internal address counter automatically increments to the next memory location after every successful byte write. When the internal address counter reaches the last memory address on the F-RAM device, further auto-increment causes the address counter to roll over to its start address. Thus, further writes overwrite any previously written data.&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; padding-top: 10px; padding-bottom: 10px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;Consider a 64-Kbit device, which has 8192 locations and requires a 13-bit address to access its 64-Kbit locations. When you start a write operation, and continue writing even after the last memory location (address 0x1FFF), the internal address counter rolls over to the device’s start address (0x0000) and continues to increment from that location. For example, if you start to write from the address 0x1FFC and write eight bytes sequentially, you would write at addresses 0x1FFC, 0x1FFD, 0x1FFE, 0x1FFF, 0x0000, 0x0001, 0x0002, and 0x0003.&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;However, there exists a difference between nvSRAM and F-RAM devices when a memory block is write-protected (with the block- protect bits BP0 and BP1 setting in the status register).&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; padding-top: 10px; padding-bottom: 10px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;In an nvSRAM, the address counter continues to increment when the write pointer enters the protected block; however no actual writes happen. Writes resume when the address counter reaches the unprotected block region. Consider an nvSRAM with the upper one-fourth block (addresses 0x1800 to 0x1FFF) write-protected. If a bulk write is initiated at the address 0x1700 and continued into the protected block, data will get written in addresses 0x1700 to 0x17FF, but data written into 0x1800 to 0x1FFF will be lost and further data will be actually written from the address 0x0000 onwards. In other words, the controller should take into account the protected blocks and perform bulk writes only on to unprotected blocks.&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;On the other hand, in an F-RAM device, when the write pointer increments from the last memory location of an unprotected block, the address increment stops, and consequently, data write stops in the protected memory block. Consider an F-RAM with the upper one-fourth block (addresses 0x1800 to 0x1FFF) write-protected. If a bulk write is initiated at the address 0x1700 and continued into the protected block, data will get written in addresses 0x1700 to 0x17FF. The next data byte will not get written in the address 0x1800. In addition, the address increment stops at the address 0x1800. All the subsequent writes will be lost.&lt;/p&gt;\n"],
        "spell":[
          "&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;When a bulk write is initiated on an F-RAM device, its internal address counter automatically increments to the next memory location after every successful byte write. When the internal address counter reaches the last memory address on the F-RAM device, further auto-increment causes the address counter to roll over to its start address. Thus, further writes overwrite any previously written data.&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; padding-top: 10px; padding-bottom: 10px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;Consider a 64-Kbit device, which has 8192 locations and requires a 13-bit address to access its 64-Kbit locations. When you start a write operation, and continue writing even after the last memory location (address 0x1FFF), the internal address counter rolls over to the device’s start address (0x0000) and continues to increment from that location. For example, if you start to write from the address 0x1FFC and write eight bytes sequentially, you would write at addresses 0x1FFC, 0x1FFD, 0x1FFE, 0x1FFF, 0x0000, 0x0001, 0x0002, and 0x0003.&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;However, there exists a difference between nvSRAM and F-RAM devices when a memory block is write-protected (with the block- protect bits BP0 and BP1 setting in the status register).&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; padding-top: 10px; padding-bottom: 10px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;In an nvSRAM, the address counter continues to increment when the write pointer enters the protected block; however no actual writes happen. Writes resume when the address counter reaches the unprotected block region. Consider an nvSRAM with the upper one-fourth block (addresses 0x1800 to 0x1FFF) write-protected. If a bulk write is initiated at the address 0x1700 and continued into the protected block, data will get written in addresses 0x1700 to 0x17FF, but data written into 0x1800 to 0x1FFF will be lost and further data will be actually written from the address 0x0000 onwards. In other words, the controller should take into account the protected blocks and perform bulk writes only on to unprotected blocks.&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;On the other hand, in an F-RAM device, when the write pointer increments from the last memory location of an unprotected block, the address increment stops, and consequently, data write stops in the protected memory block. Consider an F-RAM with the upper one-fourth block (addresses 0x1800 to 0x1FFF) write-protected. If a bulk write is initiated at the address 0x1700 and continued into the protected block, data will get written in addresses 0x1700 to 0x17FF. The next data byte will not get written in the address 0x1800. In addition, the address increment stops at the address 0x1800. All the subsequent writes will be lost.&lt;/p&gt;\n",
          "Will a roll-over happen when data is written to the last address of an F-RAM? How is it different from an nvSRAM? What happens when the F-RAM has a write-protected block? ",
          " Differences Between Address Roll-Over Schemes in F-RAM and nvSRAM Devices Under Write-Protect Settings - KBA88168\n\n511 ByteCraft\n\nWill a roll-over happen when data is written to the last address of an F-RAM? How is it different from an nvSRAM? What happens when the F-RAM has a write-protected block? \n\n149 Nonvolatile Products\n\n**\n\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;When a bulk write is initiated on an F-RAM device, its internal address counter automatically increments to the next memory location after every successful byte write. When the internal address counter reaches the last memory address on the F-RAM device, further auto-increment causes the address counter to roll over to its start address. Thus, further writes overwrite any previously written data.&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; padding-top: 10px; padding-bottom: 10px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;Consider a 64-Kbit device, which has 8192 locations and requires a 13-bit address to access its 64-Kbit locations. When you start a write operation, and continue writing even after the last memory location (address 0x1FFF), the internal address counter rolls over to the device’s start address (0x0000) and continues to increment from that location. For example, if you start to write from the address 0x1FFC and write eight bytes sequentially, you would write at addresses 0x1FFC, 0x1FFD, 0x1FFE, 0x1FFF, 0x0000, 0x0001, 0x0002, and 0x0003.&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;However, there exists a difference between nvSRAM and F-RAM devices when a memory block is write-protected (with the block- protect bits BP0 and BP1 setting in the status register).&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; padding-top: 10px; padding-bottom: 10px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;In an nvSRAM, the address counter continues to increment when the write pointer enters the protected block; however no actual writes happen. Writes resume when the address counter reaches the unprotected block region. Consider an nvSRAM with the upper one-fourth block (addresses 0x1800 to 0x1FFF) write-protected. If a bulk write is initiated at the address 0x1700 and continued into the protected block, data will get written in addresses 0x1700 to 0x17FF, but data written into 0x1800 to 0x1FFF will be lost and further data will be actually written from the address 0x0000 onwards. In other words, the controller should take into account the protected blocks and perform bulk writes only on to unprotected blocks.&lt;/p&gt;\n&lt;p style=\"margin-top: 0px; margin-bottom: 0px; font-family: Tahoma, Geneva, sans-serif; font-stretch: inherit; line-height: 16.0029983520508px; color: rgb(51, 51, 51);\"&gt;On the other hand, in an F-RAM device, when the write pointer increments from the last memory location of an unprotected block, the address increment stops, and consequently, data write stops in the protected memory block. Consider an F-RAM with the upper one-fourth block (addresses 0x1800 to 0x1FFF) write-protected. If a bulk write is initiated at the address 0x1700 and continued into the protected block, data will get written in addresses 0x1700 to 0x17FF. The next data byte will not get written in the address 0x1800. In addition, the address increment stops at the address 0x1800. All the subsequent writes will be lost.&lt;/p&gt;\n"]},
      {
        "id":"28d00o-knowledge_base-1981",
        "index_id":"knowledge_base",
        "item_id":"1981",
        "hash":"28d00o",
        "site":"http://cypress_local/",
        "ds_changed":"2015-01-20T15:13:08Z",
        "is_field_knowledge_base_type":506,
        "bs_is_new":false,
        "is_nid":1981,
        "ss_search_api_language":"und",
        "ss_title":"test 25",
        "is_vid":2341,
        "timestamp":"2015-02-03T00:50:17.145Z",
        "im_field_related_products$parents_all":[147,150,147,151,152,151],
        "tm_search_api_aggregation_1":[
          "test 25\n\n506 Compiler\n\nWhat is life?\n\n147 Aerospace &amp; Defense\n\n150 Sync SRAMs\n\n151 Automotive\n\n152 Async Fast SRAMs\n\n3.4\n\n&lt;p&gt;Good question.&lt;/p&gt;\n"],
        "tm_field_question":[
          "What is life?"],
        "im_field_knowledge_base_type$parents_all":[506],
        "im_field_related_products":[147,150,151,152],
        "tm_field_answer$value":[
          "&lt;p&gt;Good question.&lt;/p&gt;\n"],
        "spell":[
          "&lt;p&gt;Good question.&lt;/p&gt;\n",
          "What is life?",
          "test 25\n\n506 Compiler\n\nWhat is life?\n\n147 Aerospace &amp; Defense\n\n150 Sync SRAMs\n\n151 Automotive\n\n152 Async Fast SRAMs\n\n3.4\n\n&lt;p&gt;Good question.&lt;/p&gt;\n"]},
      {
        "id":"28d00o-knowledge_base-1986",
        "index_id":"knowledge_base",
        "item_id":"1986",
        "hash":"28d00o",
        "site":"http://cypress_local/",
        "ds_changed":"2015-01-20T16:46:27Z",
        "is_field_knowledge_base_type":506,
        "bs_is_new":false,
        "is_nid":1986,
        "ss_search_api_language":"und",
        "ss_title":"new content",
        "is_vid":2356,
        "timestamp":"2015-02-03T00:50:17.145Z",
        "im_field_related_products$parents_all":[148,147,149,147],
        "tm_search_api_aggregation_1":[
          "new content\n\n506 Compiler\n\ntest\n\n148 Async Fast SRAMs\n\n149 Nonvolatile Products\n\n2\n\n&lt;p&gt;test&lt;/p&gt;\n"],
        "tm_field_question":[
          "test"],
        "im_field_knowledge_base_type$parents_all":[506],
        "im_field_related_products":[148,149],
        "tm_field_answer$value":[
          "&lt;p&gt;test&lt;/p&gt;\n"],
        "spell":[
          "&lt;p&gt;test&lt;/p&gt;\n",
          "test",
          "new content\n\n506 Compiler\n\ntest\n\n148 Async Fast SRAMs\n\n149 Nonvolatile Products\n\n2\n\n&lt;p&gt;test&lt;/p&gt;\n"]},
      {
        "id":"28d00o-knowledge_base-1991",
        "index_id":"knowledge_base",
        "item_id":"1991",
        "hash":"28d00o",
        "site":"http://cypress_local/",
        "ds_changed":"2015-01-28T14:38:15Z",
        "is_field_knowledge_base_type":506,
        "bs_is_new":false,
        "is_nid":1991,
        "ss_search_api_language":"und",
        "ss_title":"Knowledge test",
        "is_vid":2366,
        "timestamp":"2015-02-03T00:50:17.145Z",
        "im_field_related_products$parents_all":[147,149,147],
        "tm_search_api_aggregation_1":[
          "Knowledge test\n\n506 Compiler\n\ntest\n\n147 Aerospace &amp; Defense\n\n149 Nonvolatile Products\n\n3\n\n&lt;p&gt;test&lt;/p&gt;\n"],
        "tm_field_question":[
          "test"],
        "im_field_knowledge_base_type$parents_all":[506],
        "im_field_related_products":[147,149],
        "tm_field_answer$value":[
          "&lt;p&gt;test&lt;/p&gt;\n"],
        "spell":[
          "&lt;p&gt;test&lt;/p&gt;\n",
          "test",
          "Knowledge test\n\n506 Compiler\n\ntest\n\n147 Aerospace &amp; Defense\n\n149 Nonvolatile Products\n\n3\n\n&lt;p&gt;test&lt;/p&gt;\n"]},
      {
        "id":"28d00o-default_node_index-1",
        "index_id":"default_node_index",
        "item_id":"1",
        "hash":"28d00o",
        "site":"http://cypress_local/",
        "is_author":1,
        "ds_changed":"2014-10-31T00:22:55Z",
        "is_comment_count":0,
        "ds_created":"2014-10-31T00:22:55Z",
        "bs_promote":false,
        "ss_search_api_language":"und",
        "bs_sticky":false,
        "ss_type":"page",
        "timestamp":"2015-02-03T01:08:50.288Z",
        "tm_title":[
          "test"],
        "tm_body$value":[
          "dajdhgol"],
        "spell":[
          "dajdhgol",
          "test"]},
      {
        "id":"28d00o-default_node_index-6",
        "index_id":"default_node_index",
        "item_id":"6",
        "hash":"28d00o",
        "site":"http://cypress_local/",
        "is_author":1,
        "ds_changed":"2014-10-31T02:13:41Z",
        "is_comment_count":0,
        "ds_created":"2014-10-31T02:09:50Z",
        "bs_promote":false,
        "ss_search_api_language":"und",
        "bs_sticky":false,
        "ss_type":"page",
        "timestamp":"2015-02-03T01:08:50.288Z",
        "tm_title":[
          "knknl"],
        "tm_body$value":[
          "ljhbljhbljhbj",
          "ljhbljhb",
          "ljhbljh"],
        "spell":[
          "ljhbljhbljhbj",
          "ljhbljhb",
          "ljhbljh",
          "knknl"]},
      {
        "id":"28d00o-default_node_index-11",
        "index_id":"default_node_index",
        "item_id":"11",
        "hash":"28d00o",
        "site":"http://cypress_local/",
        "is_author":1,
        "ds_changed":"2014-10-31T02:51:53Z",
        "is_comment_count":0,
        "ds_created":"2014-10-31T02:23:48Z",
        "bs_promote":false,
        "ss_search_api_language":"und",
        "bs_sticky":false,
        "ss_type":"page",
        "timestamp":"2015-02-03T01:08:50.288Z",
        "tm_title":[
          "khgvkhvkhj"],
        "tm_body$value":[
          "hkgvkhvkjhkjh",
          "j",
          "g",
          "kuyh",
          "iuh"],
        "spell":[
          "hkgvkhvkjhkjh",
          "j",
          "g",
          "kuyh",
          "iuh",
          "khgvkhvkhj"]}]
  },
  "facet_counts":{
    "facet_queries":{},
    "facet_fields":{
      "ss_type":[
        "part",602,
        "forum",515,
        "blog_entry",503,
        "document",500,
        "page",19,
        "news",7,
        "video",7,
        "knowledge_base_article",6,
        "slideshow_item",5,
        "blog",3,
        "external_news",1,
        "webform",1],
      "bs_sticky":[
        "false",2168,
        "true",1]},
    "facet_dates":{},
    "facet_ranges":{}
  }
}