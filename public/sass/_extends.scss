@function em($target, $context: $base-font-size) {
  @if $target == 0 {
    @return 0;
  }
  @return $target / $context + 0;
}

@mixin scale($property, $values) {
  // Create a couple of empty lists as output buffers.
  $px-values: ();
  $rem-values: ();
  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    }
    @else if type-of($value) == number and not unitless($value) and unit($value) == px {
      // px value given - calculate rem value from base-font-size
      $new-rem-value: $value / $base-font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    }
    @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $base-font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }
  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}

@mixin no-select {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

@mixin opacity($trans) {
  filter: alpha(opactiy = $trans * 100);
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$trans * 100})";
  -moz-opacity: $trans;
  -khtml-opacity: $trans;
  opacity: $trans;
}

@mixin sj-font {
  font-family: 'sj';
  font-weight: normal;
  font-style: normal;
  text-indent: 0;
  speak: none;
}

@mixin lato {
  font-family: "Lato", Helvetica, Arial, sans-serif;
}

@mixin latoBlack {
  font-family: "LatoBlack", Helvetica, Arial, sans-serif;
}

@mixin myriad {
  font-family: "MyriadPro", Helvetica, Arial, sans-serif;
  .lt-ie9 & {
    letter-spacing: -4px;
  }
}

@mixin myriadCond {
  font-family: "MyriadProCond", Impact, Helvetica, Arial, sans-serif;
}

@mixin placeholder($color) {
  &:focus {
    outline: 0 none;
  }
  &::-webkit-input-placeholder {
    color: $color;
  }
  &:-moz-placeholder {
    color: $color;
  }
  &::-moz-placeholder {
    color: $color;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
  &.placeholder {
    color: $color;
  }
}

@mixin element-invisible {
  position: absolute !important;
  clip: rect(1px, 1px, 1px, 1px);
  overflow: hidden;
  height: 1px;
}

// On retina, use image that's scaled by 2.
@mixin background-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6 / 2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}

//WTF??? (to check)
%clearfix_:after {
  content: '.';
  clear: both;
  display: block;
  height: 0;
  visibility: hidden;
}

%clearfix {
  *zoom: 1;
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin clearfix {
  *zoom: 1;
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}



@mixin reset-container {
  max-width: 100%;
  width: auto;
  padding-left: 0;
  padding-right: 0;
  margin-left: 0;
  margin-right: 0;
}

$base-font-size: 16px;

@function calculate-rem($size) {
  $rem-size: $size / $base-font-size;
  @return #{$rem-size}rem;
}

@mixin fontsize-rem($size) {
  font-size: $size;
  font-size: calculate-rem($size);
}

@mixin lineheight-rem($size) {
  line-height: $size;
  line-height: calculate-rem($size);
}

@mixin fontParams($size, $lh) {
  font-size: $size;
  line-height: $lh;
  font-size: calculate-rem($size);
  line-height: calculate-rem($lh);
}

.basic-format-text {
  @include fontsize-rem(14px);
  h2 {
    @include fontsize-rem(16px);
    @include scale(margin-bottom, 10px);
    @include scale(margin-top, 15px);
  }
  h3 {
    @include fontsize-rem(14px);
    font-weight: bold;
  }
  p {
    @include scale(line-height, 20px);
    @include scale(margin-bottom, 5px);
    img {
      @include scale(margin, 15px 0);
    }
    a {
      text-decoration: underline;
      &:hover {
        text-decoration: none;
      }
    }
  }
  ul,
  ol {
    list-style-type: disc;
    @include scale(margin-bottom, 10px);
    @include scale(padding-left, 20px);
    &.links {
      padding-left: 0;
    }
    li {
      @include scale(line-height, 20px);
      @include scale(margin-bottom, 5px);
    }
  }
}

// Social media + icons.
%extend-facebook {
  &:after {
    content: '\a607';
  }
}

%extend-twitter {
  &:after {
    content: '\a600';
  }
}

%extend-linkedin {
  &:after {
    content: '\a606';
  }
}

%extend-rss {
  &:after {
    content: '\a603';
  }
}

%extend-gplus {
  &:after {
    content: '\a601';
  }
}

%extend-addcontact {
  &:after {
    content: '\a60a';
  }
}

%extend-s {
  &:after {
    content: '\e605';
  }
}

%extend-business {
  &:after {
    content: '\e606';
  }
}

%extend-file {
  &:after {
    content: '\e607';
  }
}

%extend-person {
  &:after {
    content: '\e608';
  }
}

%extend-close {
  &:after {
    content: '\e60f';
  }
}

%extend-close-circle{
  &:after {
    content: '\e610';
    display: inline-block;
    @include sj-font;
  }
}

%large-header {

  line-height: .9em;
  font-weight: bold;
  text-transform: uppercase;
  @include fontsize-rem(36px);
  @include myriadCond;
  @include at-breakpoint(480px) {
    @include fontsize-rem(47px);
  }

  @include at-breakpoint(768px) {
    @include fontsize-rem(62px);
  }
}

%tooltip-small{
  position: absolute;
  display: none;
  margin: 0;
  @include scale(top, -57px);
  left: auto;
  @include scale(right, -350px);
  @include fontsize-rem(10px);
  @include lineheight-rem(20px);
  @include scale(padding, 15px 5px 15px 10px);
  z-index: 1;
  @include scale(min-height, 100px);
  box-shadow: 0 0 3px rgba(0, 0, 0, 0.2);
  @include scale(width, 300px);
  height: auto;
  background: #F4F4F4;
  border: 1px solid #ccc;
  &:before,
  &:after {
   content: '';
   width: 0;
   height: 0;
   position: absolute;
   @include scale(top, 42px);
   @include scale(right, -28px);
   @include scale(left, -18px);
   @include scale(margin-left, -10px);
   border-style: solid;
   border-width: 25px 28px 25px 0;
   border-color: transparent #ccc transparent transparent;
  }
  &:after {
   @include scale(top, 43px);
   @include scale(right, -27px);
   @include scale(left, -17px);
   border-width: 24px 27px 24px 0;
   border-color: transparent #f4f4f4 transparent transparent;
  }
}

%search-submit{
  border: 0 none;
  color: transparent;
  font-size: 0;
  position: absolute;
  @include scale(width, 28px);
  @include scale(height, 28px);
  right: 0;
  top: 0;
  @include background(image-url("search_button.svg") no-repeat 0 0);
  .no-svg & {
    @include background(image-url("search_button.png") no-repeat 0 0);
    @include scale(top, 4px);
  }
}

%search-label{
  @include fontsize-rem(14px);
  line-height: 1.4;
  @include scale(margin-right, 10px);
}



//Setting svg/png file, '$name-file',  as background image, rescaling img for '$zoom: true'

@mixin img-svg($name-file, $zoom:false){
  @include background(image-url("#{$name-file}.svg") no-repeat left center);
  .no-svg & {
    @include background(image-url("#{$name-file}.png") no-repeat left center);
  }
  @if $zoom {
    @include at-breakpoint($small-desktop) {
      @include background-size(80px, 96px);
      background-position: center center;
      .no-svg & {
        @include background(image-url("#{$name-file}-big.png") no-repeat center center);
      }
    }
  }
}

@mixin dynamic-img($name-file){
  &:before{
    content:'';
    @include background(image-url("../images/#{$name-file}.png") no-repeat center center);
    @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6 / 2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
    background-image: url("../images/#{$name-file}2x.png");
    background-size: 49px 60px;
    }
  }
}

%set-img-div{
  @include scale(width, 50px);
  @include scale(height, 50px);
  float: left;
  @include scale(margin-right, 10px);
   @include at-breakpoint($small-desktop) {
     @include scale(width, 125px);
     @include scale(height, 125px);
     @include scale(margin-right, 15px);
   }
}
